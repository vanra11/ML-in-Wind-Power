#Linear Regression
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

data = {
    'Wind_Speed': [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.5, 13, 13.5, 14, 14.5, 15, 15.5, 16, 16.5, 17, 17.5, 18, 18.5],
    'Power_Output': [109, 169, 207, 231, 215, 242, 292, 367, 309, 362, 363, 329, 330, 346, 240, 271, 198, 161, 149, 138, 129, 115, 78, 65, 30, 23, 26, 16, 16, 8, 10, 2, 3, 7, 2, 4]
}

df = pd.DataFrame(data)


X = df[['Wind_Speed']]  # Features (independent variables)
y = df['Power_Output']  # Target (dependent variable)

# Split the data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Training the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Making predictions
y_pred = model.predict(X_test)

# SEvaluating the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'RÂ² Score: {r2}')

# Plotting the results
plt.scatter(X_test, y_test, color='blue', label='Actual')
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Predicted')
plt.xlabel('Wind Speed')
plt.ylabel('Power Output')
plt.title('Linear Regression: Wind Speed vs Power Output')
plt.legend()
plt.show()
