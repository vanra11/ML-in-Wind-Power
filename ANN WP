import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Defining the data
wind_speed = [1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.5, 13, 13.5, 14, 14.5, 15, 15.5, 16, 16.5, 17, 17.5, 18]
power_output = [109, 169, 207, 231, 215, 242, 292, 367, 309, 362, 363, 329, 330, 346, 665.7, 779.8, 942.5, 1073.30, 1200.20, 1329.50, 1354.00, 1385.00, 1366.00, 1364.80, 1501.30, 1515.50, 1498.40, 1521.30, 1522.10, 1526.30, 1530.20, 1524.20, 1531.50, 1525.50]

# Checking the lengths of the lists
print(len(wind_speed))  # Should print 34
print(len(power_output))  # Should print 36

# Removing extra elements from power_output
power_output = power_output[:len(wind_speed)]

# Checking the lengths of the lists again
print(len(wind_speed))  # Should print 34
print(len(power_output))  # Should print 34

# Converting to DataFrame
df = pd.DataFrame({'Wind_Speed': wind_speed, 'Power_Output': power_output})

# Preparing the feature matrix and target vector
features = df[['Wind_Speed']]
target = df['Power_Output']

# Normalizing the data
scaler_features = MinMaxScaler(feature_range=(0, 1))
scaler_target = MinMaxScaler(feature_range=(0, 1))
scaled_features = scaler_features.fit_transform(features)
scaled_target = scaler_target.fit_transform(target.values.reshape(-1, 1))

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(scaled_features, scaled_target, test_size=0.2, random_state=42)

# Building the ANN model
model = MLPRegressor(hidden_layer_sizes=(50, 50), activation='relu', solver='adam', max_iter=1000, random_state=42)

# Training the model
model.fit(X_train, y_train.ravel())

# Making predictions
predictions = model.predict(X_test)

# Inverse transforming the predictions and actual values
predictions = scaler_target.inverse_transform(predictions.reshape(-1, 1))
y_test_actual = scaler_target.inverse_transform(y_test)

# Evaluating the model
mse = mean_squared_error(y_test_actual, predictions)
print("Mean Squared Error:", mse)

# Plotting actual vs predicted values
plt.figure(figsize=(10, 6))
plt.plot(y_test_actual, color='blue', label='Actual Power Output')
plt.plot(predictions, color='red', label='Predicted Power Output')
plt.title('ANN: Actual vs Predicted Power Output')
plt.xlabel('Samples')
plt.ylabel('Power Output (kW)')
plt.legend()
plt.show()
